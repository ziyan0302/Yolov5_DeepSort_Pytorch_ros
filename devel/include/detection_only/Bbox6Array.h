// Generated by gencpp from file detection_only/Bbox6Array.msg
// DO NOT EDIT!


#ifndef DETECTION_ONLY_MESSAGE_BBOX6ARRAY_H
#define DETECTION_ONLY_MESSAGE_BBOX6ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <detection_only/Bbox_6.h>

namespace detection_only
{
template <class ContainerAllocator>
struct Bbox6Array_
{
  typedef Bbox6Array_<ContainerAllocator> Type;

  Bbox6Array_()
    : bboxes()  {
    }
  Bbox6Array_(const ContainerAllocator& _alloc)
    : bboxes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::detection_only::Bbox_6_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::detection_only::Bbox_6_<ContainerAllocator> >::other >  _bboxes_type;
  _bboxes_type bboxes;





  typedef boost::shared_ptr< ::detection_only::Bbox6Array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_only::Bbox6Array_<ContainerAllocator> const> ConstPtr;

}; // struct Bbox6Array_

typedef ::detection_only::Bbox6Array_<std::allocator<void> > Bbox6Array;

typedef boost::shared_ptr< ::detection_only::Bbox6Array > Bbox6ArrayPtr;
typedef boost::shared_ptr< ::detection_only::Bbox6Array const> Bbox6ArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_only::Bbox6Array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_only::Bbox6Array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection_only::Bbox6Array_<ContainerAllocator1> & lhs, const ::detection_only::Bbox6Array_<ContainerAllocator2> & rhs)
{
  return lhs.bboxes == rhs.bboxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection_only::Bbox6Array_<ContainerAllocator1> & lhs, const ::detection_only::Bbox6Array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection_only

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detection_only::Bbox6Array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_only::Bbox6Array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_only::Bbox6Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_only::Bbox6Array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_only::Bbox6Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_only::Bbox6Array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_only::Bbox6Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61b8f2a52aff12e25f2957c1314c78d3";
  }

  static const char* value(const ::detection_only::Bbox6Array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61b8f2a52aff12e2ULL;
  static const uint64_t static_value2 = 0x5f2957c1314c78d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_only::Bbox6Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_only/Bbox6Array";
  }

  static const char* value(const ::detection_only::Bbox6Array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_only::Bbox6Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# bboxes \n"
"# [x1,y1,x2,y2,conf,class]\n"
"Bbox_6[] bboxes \n"
"================================================================================\n"
"MSG: detection_only/Bbox_6\n"
"# 1 bbox \n"
"# [x1,y1,x2,y2,conf,class]\n"
"# float32[] bbox_info\n"
"float32 x1\n"
"float32 y1\n"
"float32 x2\n"
"float32 y2\n"
"float32 conf\n"
"float32 cls\n"
;
  }

  static const char* value(const ::detection_only::Bbox6Array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_only::Bbox6Array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bboxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bbox6Array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_only::Bbox6Array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_only::Bbox6Array_<ContainerAllocator>& v)
  {
    s << indent << "bboxes[]" << std::endl;
    for (size_t i = 0; i < v.bboxes.size(); ++i)
    {
      s << indent << "  bboxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::detection_only::Bbox_6_<ContainerAllocator> >::stream(s, indent + "    ", v.bboxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_ONLY_MESSAGE_BBOX6ARRAY_H
