// Generated by gencpp from file detection_only/bbox.msg
// DO NOT EDIT!


#ifndef DETECTION_ONLY_MESSAGE_BBOX_H
#define DETECTION_ONLY_MESSAGE_BBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detection_only
{
template <class ContainerAllocator>
struct bbox_
{
  typedef bbox_<ContainerAllocator> Type;

  bbox_()
    : bbox_info()  {
    }
  bbox_(const ContainerAllocator& _alloc)
    : bbox_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _bbox_info_type;
  _bbox_info_type bbox_info;





  typedef boost::shared_ptr< ::detection_only::bbox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_only::bbox_<ContainerAllocator> const> ConstPtr;

}; // struct bbox_

typedef ::detection_only::bbox_<std::allocator<void> > bbox;

typedef boost::shared_ptr< ::detection_only::bbox > bboxPtr;
typedef boost::shared_ptr< ::detection_only::bbox const> bboxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_only::bbox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_only::bbox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection_only::bbox_<ContainerAllocator1> & lhs, const ::detection_only::bbox_<ContainerAllocator2> & rhs)
{
  return lhs.bbox_info == rhs.bbox_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection_only::bbox_<ContainerAllocator1> & lhs, const ::detection_only::bbox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection_only

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detection_only::bbox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_only::bbox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_only::bbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_only::bbox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_only::bbox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_only::bbox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_only::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "913b440d53de141b21b184494ddea913";
  }

  static const char* value(const ::detection_only::bbox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x913b440d53de141bULL;
  static const uint64_t static_value2 = 0x21b184494ddea913ULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_only::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_only/bbox";
  }

  static const char* value(const ::detection_only::bbox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_only::bbox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 1 bbox \n"
"# [x1,y1,x2,y2,conf,class]\n"
"float32[] bbox_info \n"
;
  }

  static const char* value(const ::detection_only::bbox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_only::bbox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bbox_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bbox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_only::bbox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_only::bbox_<ContainerAllocator>& v)
  {
    s << indent << "bbox_info[]" << std::endl;
    for (size_t i = 0; i < v.bbox_info.size(); ++i)
    {
      s << indent << "  bbox_info[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bbox_info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_ONLY_MESSAGE_BBOX_H
