// Generated by gencpp from file detection_only/Bbox_6.msg
// DO NOT EDIT!


#ifndef DETECTION_ONLY_MESSAGE_BBOX_6_H
#define DETECTION_ONLY_MESSAGE_BBOX_6_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detection_only
{
template <class ContainerAllocator>
struct Bbox_6_
{
  typedef Bbox_6_<ContainerAllocator> Type;

  Bbox_6_()
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , conf(0.0)
    , cls(0.0)  {
    }
  Bbox_6_(const ContainerAllocator& _alloc)
    : x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , conf(0.0)
    , cls(0.0)  {
  (void)_alloc;
    }



   typedef float _x1_type;
  _x1_type x1;

   typedef float _y1_type;
  _y1_type y1;

   typedef float _x2_type;
  _x2_type x2;

   typedef float _y2_type;
  _y2_type y2;

   typedef float _conf_type;
  _conf_type conf;

   typedef float _cls_type;
  _cls_type cls;





  typedef boost::shared_ptr< ::detection_only::Bbox_6_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_only::Bbox_6_<ContainerAllocator> const> ConstPtr;

}; // struct Bbox_6_

typedef ::detection_only::Bbox_6_<std::allocator<void> > Bbox_6;

typedef boost::shared_ptr< ::detection_only::Bbox_6 > Bbox_6Ptr;
typedef boost::shared_ptr< ::detection_only::Bbox_6 const> Bbox_6ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_only::Bbox_6_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_only::Bbox_6_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detection_only::Bbox_6_<ContainerAllocator1> & lhs, const ::detection_only::Bbox_6_<ContainerAllocator2> & rhs)
{
  return lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.conf == rhs.conf &&
    lhs.cls == rhs.cls;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detection_only::Bbox_6_<ContainerAllocator1> & lhs, const ::detection_only::Bbox_6_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detection_only

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::detection_only::Bbox_6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_only::Bbox_6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_only::Bbox_6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_only::Bbox_6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_only::Bbox_6_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_only::Bbox_6_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_only::Bbox_6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a76d49beb9ad80ed19e0ba292e46abc";
  }

  static const char* value(const ::detection_only::Bbox_6_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a76d49beb9ad80eULL;
  static const uint64_t static_value2 = 0xd19e0ba292e46abcULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_only::Bbox_6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_only/Bbox_6";
  }

  static const char* value(const ::detection_only::Bbox_6_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_only::Bbox_6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 1 bbox \n"
"# [x1,y1,x2,y2,conf,class]\n"
"# float32[] bbox_info\n"
"float32 x1\n"
"float32 y1\n"
"float32 x2\n"
"float32 y2\n"
"float32 conf\n"
"float32 cls\n"
;
  }

  static const char* value(const ::detection_only::Bbox_6_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_only::Bbox_6_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.conf);
      stream.next(m.cls);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bbox_6_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_only::Bbox_6_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_only::Bbox_6_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<float>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<float>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<float>::stream(s, indent + "  ", v.y2);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "cls: ";
    Printer<float>::stream(s, indent + "  ", v.cls);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_ONLY_MESSAGE_BBOX_6_H
